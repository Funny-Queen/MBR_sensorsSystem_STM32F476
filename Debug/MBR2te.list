
MBR2te.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00010304  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000773  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000001e3  00000000  00000000  00010aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000070  00000000  00000000  00010c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00010d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000401  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000003b5  00000000  00000000  00011149  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000114fe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000000b0  00000000  00000000  0001157c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001162c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002e4 	.word	0x080002e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002e4 	.word	0x080002e4

080001c8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
  int i = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
	i++;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3301      	adds	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
 80001d8:	e7fb      	b.n	80001d2 <main+0xa>
	...

080001dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000214 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001e2:	e003      	b.n	80001ec <LoopCopyDataInit>

080001e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001ea:	3104      	adds	r1, #4

080001ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <LoopForever+0xa>)
	ldr	r3, =_edata
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001f4:	d3f6      	bcc.n	80001e4 <CopyDataInit>
	ldr	r2, =_sbss
 80001f6:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001f8:	e002      	b.n	8000200 <LoopFillZerobss>

080001fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001fc:	f842 3b04 	str.w	r3, [r2], #4

08000200 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <LoopForever+0x16>)
	cmp	r2, r3
 8000202:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000204:	d3f9      	bcc.n	80001fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000206:	f000 f813 	bl	8000230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800020a:	f000 f847 	bl	800029c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800020e:	f7ff ffdb 	bl	80001c8 <main>

08000212 <LoopForever>:

LoopForever:
    b LoopForever
 8000212:	e7fe      	b.n	8000212 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000214:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000218:	08000304 	.word	0x08000304
	ldr	r0, =_sdata
 800021c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000220:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000224:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000228:	2000001c 	.word	0x2000001c

0800022c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC1_2_IRQHandler>
	...

08000230 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <SystemInit+0x64>)
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <SystemInit+0x64>)
 8000238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000244:	4a14      	ldr	r2, [pc, #80]	; (8000298 <SystemInit+0x68>)
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <SystemInit+0x68>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <SystemInit+0x68>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000256:	4a10      	ldr	r2, [pc, #64]	; (8000298 <SystemInit+0x68>)
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <SystemInit+0x68>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000260:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000264:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <SystemInit+0x68>)
 8000268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800026c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <SystemInit+0x68>)
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <SystemInit+0x68>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000278:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <SystemInit+0x68>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <SystemInit+0x64>)
 8000282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000286:	609a      	str	r2, [r3, #8]
#endif
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	40021000 	.word	0x40021000

0800029c <__libc_init_array>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	4e0d      	ldr	r6, [pc, #52]	; (80002d4 <__libc_init_array+0x38>)
 80002a0:	4c0d      	ldr	r4, [pc, #52]	; (80002d8 <__libc_init_array+0x3c>)
 80002a2:	1ba4      	subs	r4, r4, r6
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	2500      	movs	r5, #0
 80002a8:	42a5      	cmp	r5, r4
 80002aa:	d109      	bne.n	80002c0 <__libc_init_array+0x24>
 80002ac:	4e0b      	ldr	r6, [pc, #44]	; (80002dc <__libc_init_array+0x40>)
 80002ae:	4c0c      	ldr	r4, [pc, #48]	; (80002e0 <__libc_init_array+0x44>)
 80002b0:	f000 f818 	bl	80002e4 <_init>
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	2500      	movs	r5, #0
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d105      	bne.n	80002ca <__libc_init_array+0x2e>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c4:	4798      	blx	r3
 80002c6:	3501      	adds	r5, #1
 80002c8:	e7ee      	b.n	80002a8 <__libc_init_array+0xc>
 80002ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ce:	4798      	blx	r3
 80002d0:	3501      	adds	r5, #1
 80002d2:	e7f2      	b.n	80002ba <__libc_init_array+0x1e>
 80002d4:	080002fc 	.word	0x080002fc
 80002d8:	080002fc 	.word	0x080002fc
 80002dc:	080002fc 	.word	0x080002fc
 80002e0:	08000300 	.word	0x08000300

080002e4 <_init>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr

080002f0 <_fini>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr
